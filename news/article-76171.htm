<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://singboxgithub.github.io/news/article-76171.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Android开发基础——Fragment</title>
        <meta name="description" content="当今社会，移动设备发展十分迅速，除了手机，平板也开始慢慢多了起来。而对平板和手机来说，其屏幕大小和用户使用习惯也是不同的，比如，手机屏幕大小一般在3~6英寸之间，平板屏幕大小一般在7~10英寸之间，同" />
        <link rel="icon" href="/assets/website/img/singboxgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="SingBox Github免费节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://singboxgithub.github.io/news/article-76171.htm" />
    <meta property="og:site_name" content="SingBox Github免费节点分享站" />
    <meta property="og:title" content="Android开发基础——Fragment" />
    <meta property="og:image" content="https://singboxgithub.github.io/uploads/20240802/952ce8bc3afc7941d161fcbf9ddb5f4e.webp" />
        <meta property="og:release_date" content="2025-03-18T06:12:07" />
    <meta property="og:updated_time" content="2025-03-18T06:12:07" />
        <meta property="og:description" content="当今社会，移动设备发展十分迅速，除了手机，平板也开始慢慢多了起来。而对平板和手机来说，其屏幕大小和用户使用习惯也是不同的，比如，手机屏幕大小一般在3~6英寸之间，平板屏幕大小一般在7~10英寸之间，同" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Android开发基础——Fragment">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/singboxgithub/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/remixicon/remixicon.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/singboxgithub/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-QR1XS4LQCV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-QR1XS4LQCV');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- ======= Header ======= -->
    <header id="header" class="fixed-top d-flex align-items-center">
        <div class="container d-flex align-items-center">
            <a href="/">
                        <p class="logo me-auto">SingBox <span>Github</span></p>
                        </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <ol>
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li>正文</li>
                </ol>
                <h1>Android开发基础——Fragment</h1>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= Tabs Section ======= -->
        <section id="tabs" class="tabs">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>当今社会，移动设备发展十分迅速，除了手机，平板也开始慢慢多了起来。而对平板和手机来说，其屏幕大小和用户使用习惯也是不同的，比如，手机屏幕大小一般在3~6英寸之间，平板屏幕大小一般在7~10英寸之间，同时手机一般竖屏使用场景较多，而平板则是横屏使用场景较多。</p> <h2>Fragment是什么</h2> <p>Fragment是一种可以嵌入在Activity当中的UI片段，其能够让程序更加合理充分利用大屏幕的空间，因此在平板上应用得非常广泛。同时其还可以包含布局，也有自己的生命周期，可以理解为是另一种Activity。</p> <p>比如视频APP，在手机上可能最上边是视频窗口，然后是视频介绍部分，最下侧可能是视频列表，而在平板竖屏状态下，这样显示可能没什么问题，而当平板横置时，这样的显示方案对于空间的利用效率就不够了，通常此时左上角是视频窗口，左下角是视频介绍和评论区，而整个右侧部分则是视频列表，这样的方法不仅屏幕空间利用效率更高，也更符合人类的审美。</p> <p>上面提到的平板横置的状态，就可以将左侧内容和右侧内容分别放在两个Fragment中，然后在同一个Activity中引入这两个Fragment，这样就可以充分利用屏幕空间。</p> <h2>Fragment的使用方式</h2> <p>首先新建一个FragementTest项目。</p> <h3>Fragment的简单用法</h3> <p>然后新建一个左侧Fragment的布局left_fragment.xml：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     android:orientation="vertical"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;!-- TODO: Update blank fragment layout --&gt;     &lt;Button         android:id="@+id/button"         android:layout_width="wrap_content"         android:layout_height="wrap_content"         android:layout_gravity="center_horizontal"         android:text="Button" /&gt;  &lt;/LinearLayout&gt;</code></pre> <p>然后新建一个右侧Fragment的布局right_fragment.xml：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     android:orientation="vertical"     android:background="#00ff00"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;!-- TODO: Update blank fragment layout --&gt;     &lt;TextView         android:layout_width="wrap_content"         android:layout_height="wrap_content"         android:layout_gravity="center_horizontal"         android:textSize="24sp"         android:text="This is right Fragment" /&gt;  &lt;/LinearLayout&gt;</code></pre> <p>然后编写LeftFragment中的代码：</p> <pre><code class="language-XML">class LeftFragment:Fragment() {     override fun onCreateView(         inflater: LayoutInflater,         container: ViewGroup?,         savedInstanceState: Bundle?     ): View? {         return inflater.inflate(R.layout.left_fragment, container, false)     } }</code></pre> <p>&nbsp;然后编写RightFragment中的代码：</p> <pre><code class="language-XML">class RightFragment:Fragment() {     override fun onCreateView(         inflater: LayoutInflater,         container: ViewGroup?,         savedInstanceState: Bundle?     ): View? {         return inflater.inflate(R.layout.right_fragment, container, false)     } }</code></pre> <p>上面的代码只是通过LayoutInflater的inflate方法将定义的布局动态加载而已。</p> <p>然后修改activity_main.xml中的代码：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     xmlns:tools="http://schemas.android.com/tools"     android:orientation="horizontal"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;fragment         tools:ignore="Suspicious0dp"         android:id="@+id/leftFrag"         android:name="com.example.fragmenttest.LeftFragment"         android:layout_width="0dp"         android:layout_height="match_parent"         android:layout_weight="1"/&gt;      &lt;fragment         tools:ignore="Suspicious0dp"         android:id="@+id/rightFrag"         android:name="com.example.fragmenttest.RightFragment"         android:layout_width="0dp"         android:layout_height="match_parent"         android:layout_weight="1"/&gt;  &lt;/LinearLayout&gt;</code></pre> <p>上面的代码中，还使用了android:name属性来显式声明要添加的Fragment类名。</p> <p>程序运行结果为：</p> <p class="img-center"><img fetchpriority="high" decoding="async" alt="" height="442" src="http://img.555519.xyz/uploads/20230205/fcf45b0353c7f71a8199370131233d0a.jpg"></p> <h3>动态添加Fragment</h3> <p>上面只是在布局文件中添加Fragment，不过Fragment还可以在程序运行时动态地添加到Activity中，以使程序界面定制地更加多样化。</p> <p>在之前的代码上继续新建another_right_fragment.xml：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     android:orientation="vertical"     android:background="#ffff00"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;TextView         android:layout_width="wrap_content"         android:layout_height="wrap_content"         android:layout_gravity="center_horizontal"         android:textSize="24sp"         android:text="This is another right fragment"/&gt;  &lt;/LinearLayout&gt;</code></pre> <p>&nbsp;这里只是修改了背景色，然后新建AnotherRightFragment：</p> <pre><code class="language-Kotlin">class AnotherRightFragment:Fragment() {     override fun onCreateView(         inflater: LayoutInflater,         container: ViewGroup?,         savedInstanceState: Bundle?     ): View? {         return inflater.inflate(R.layout.another_right_fragment, container, false)     } }</code></pre> <p>这里也只是简单地加载新创建的布局，然后修改activity_main.xml：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     xmlns:tools="http://schemas.android.com/tools"     android:orientation="horizontal"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;fragment         tools:ignore="Suspicious0dp"         android:id="@+id/leftFrag"         android:name="com.example.fragmenttest.LeftFragment"         android:layout_width="0dp"         android:layout_height="match_parent"         android:layout_weight="1"/&gt;      &lt;FrameLayout         tools:ignore="Suspicious0dp"         android:id="@+id/rightLayout"         android:layout_width="0dp"         android:layout_height="match_parent"         android:layout_weight="1"/&gt;  &lt;/LinearLayout&gt;</code></pre> <p>&nbsp;这里是将右侧的Fragment更改为FrameLayout，然后修改MainActivity中的代码：</p> <pre><code class="language-Kotlin">class MainActivity : AppCompatActivity() {     override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)         setContentView(R.layout.activity_main)         button.setOnClickListener {             replaceFragment(AnotherRightFragment())         }         replaceFragment(RightFragment())     }      private fun replaceFragment(fragment: Fragment) {         val fragmentManager = supportFragmentManager         val transaction = fragmentManager.beginTransaction()         transaction.replace(R.id.rightLayout, fragment)         transaction.commit()     } }</code></pre> <p>&nbsp;这样就会在点击左侧Fragment中的按钮后，更改右侧Fragment的背景颜色。</p> <p>从上述过程可以看出，动态添加Fragment主要分为5步：</p> <ul> <li>创建待添加Fragment的实例</li> <li>获取FragmentManager，在Activity中可以直接调用getSupportFragmentManager方法获取</li> <li>开启一个事务，通过调用beginTransaction方法开启</li> <li>向容器内添加或替换Fragment，一般使用replace方法实现，需要传入容器的id和待添加的Fragment实例</li> <li>提交事务，使用commit方法完成</li> </ul> <h3>在Fragment中实现返回栈</h3> <p>在上面的代码中，实现了动态添加Fragment，但此时如果点击back键，就会直接退出，但是通常情况下，用户可能只是想要回到上一个Fragment，这就需要实现返回栈了。</p> <p>FragmentTransaction中有一个addToBackStack方法，可以用于将一个事务添加到返回栈中，修改MainActivity中的代码：</p> <pre><code class="language-Kotlin">    private fun replaceFragment(fragment: Fragment) {         val fragmentManager = supportFragmentManager         val transaction = fragmentManager.beginTransaction()         transaction.replace(R.id.rightLayout, fragment)         transaction.addToBackStack(null)         transaction.commit()     }</code></pre> <p>&nbsp;在事务提交之前调用addToBackStack方法，其可以接收一个名字用于描述返回栈的状态，一般传入null即可。之后运行程序，在点击button实现背景转换后，点击back键，便可以回到原来的背景状态，然后再点击back键，程序才会退出。</p> <h3>Fragment和Activity之间的交互</h3> <p>虽然Fragment可以嵌入到Activity中显示，但其实这两者各自有独立的类，两者之间并没有明显的方式来直接进行交互。</p> <p>为了方便两者进行交互，FragmentManager提供了一个类似于findViewById的方法，专门用于从布局文件中获取Fragment的实例，代码为：</p> <pre><code class="language-Kotlin">    val fragment = supportFragmentManager.findFragmentById(R.id.leftFrag) as LeftFragment </code></pre> <p>调用上述方法，就可以在Activity中得到相应Fragment的实例，然后就能够调用Fragment中的方法。</p> <p>同时，kotlin-android-extensions也对findFragmentById方法进行了扩展，允许用户直接使用布局文件中定义的Fragment id名称来自动获取相应的Fragment实例：</p> <pre><code class="language-Kotlin">    val fragment = leftFrag as LeftFragment </code></pre> <p>显然，这一种方法更加简洁。</p> <p>相反，在Fragment中都可以通过调用getActivity方法来得到和当前Fragment相关联的Activity实例：</p> <pre><code class="language-Kotlin">        if(activity != null) {             val mainActivity = activity as MainActivity         }</code></pre> <p>这里由于getActivity方法有可能返回null，因此需要进行判空处理，这样也就能够获取Activity实例了。</p> <p>而不同Fragment之间的通信则可以先在Fragment中获取与之相关联的Activity，然后通过该Activity获取另外的Fragment实例，也就间接实现了不同Fragment间的通信。</p> <h2>Fragment的生命周期</h2> <h3>Fragment的状态和回调</h3> <p>Fragment和Activity一样，在其生命周期中也会存在几种状态：</p> <ul> <li>运行状态：当一个Fragment所关联的Activity正处于运行状态时，该Fragment也处于运行状态。</li> <li>暂停状态：当一个Activity进入暂停状态时(由于另一个未占满屏幕的Activity被添加至栈顶)，与之相关联的Fragment就会进入暂停状态</li> <li>停止状态：当一个Activity进入停止状态时，与之相关联的Fragment就会进入停止状态，或者通过调用FragmentTransaction的remove/replace方法将Fragment从Activity中移除，但在事务提交之前调用了addToBackStack方法，此时Fragment也会进入停止状态。即进入停止状态的Fragment对用户来说是完全不可见的，有可能会被系统回收。</li> <li>销毁状态：Fragment总是依附于Activity而存在，因此当Activity被销毁时，与之相关联的Fragment就会进入销毁状态，或者通过调用FragmentTransaction的remove/replace方法将Fragment从Activity中移除，但在事务提交之前并没有调用addToBackStack方法，此时Fragment也会进入销毁状态。</li> </ul> <p>和Activity相似，Fragment也提供了一些附加的回调方法，以覆盖其整个生命周期的每个环节：</p> <ul> <li>onAttach：当Fragment和Activity建立关联时调用</li> <li>onCreateView：为Fragment创建视图(加载布局)时调用</li> <li>onActivityCreated：确保与Fragment相关联的Activity已经创建完毕时调用</li> <li>onDestroyView：当与Fragment关联的视图被移除时调用</li> <li>onDetach：当Fragment和Activity解除关联时调用</li> </ul> <p class="img-center"><img decoding="async" alt="" height="847" src="http://img.555519.xyz/uploads/20230205/e605cbcc95e373914a69df2a7a4e5910.jpg"></p> <h3>&nbsp;体验Fragment的生命周期</h3> <p>这里通过一个例子，看一下Fragment的生命周期：</p> <pre><code class="language-Kotlin">class RightFragment:Fragment() {     companion object {         const val TAG = "RightFragment"     }      override fun onAttach(context: Context) {         super.onAttach(context)         Log.d(TAG, "onAttach")     }      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)         Log.d(TAG, "onCreate")     }          override fun onCreateView(         inflater: LayoutInflater,         container: ViewGroup?,         savedInstanceState: Bundle?     ): View? {         Log.d(TAG, "onCreateView")         return inflater.inflate(R.layout.right_fragment, container, false)     }      override fun onActivityCreated(savedInstanceState: Bundle?) {         super.onActivityCreated(savedInstanceState)         Log.d(TAG, "onActivityCreated")     }      override fun onStart() {         super.onStart()         Log.d(TAG, "onStart")     }      override fun onResume() {         super.onResume()         Log.d(TAG, "onResume")     }      override fun onPause() {         super.onPause()         Log.d(TAG, "onPause")     }      override fun onStop() {         super.onStop()         Log.d(TAG, "onStop")     }      override fun onDestroyView() {         super.onDestroyView()         Log.d(TAG, "onDestroyView")     }      override fun onDestroy() {         super.onDestroy()         Log.d(TAG, "onDestroy")     }      override fun onDetach() {         super.onDetach()         Log.d(TAG, "onDetach")     } }</code></pre> <p>运行程序结果为：</p> <pre><code class="language-Kotlin">2022-09-24 11:33:33.318 4924-4924/com.example.fragmenttest D/RightFragment: onAttach 2022-09-24 11:33:33.319 4924-4924/com.example.fragmenttest D/RightFragment: onCreate 2022-09-24 11:33:33.322 4924-4924/com.example.fragmenttest D/RightFragment: onCreateView 2022-09-24 11:33:33.330 4924-4924/com.example.fragmenttest D/RightFragment: onActivityCreated 2022-09-24 11:33:33.331 4924-4924/com.example.fragmenttest D/RightFragment: onStart 2022-09-24 11:33:33.338 4924-4924/com.example.fragmenttest D/RightFragment: onResume</code></pre> <p>这里的打印信息顺序和上图显示的Fragment生命周期是一致的，然后点击左侧Fragment中的按钮：</p> <pre><code class="language-Kotlin">2022-09-24 11:35:39.674 4924-4924/com.example.fragmenttest D/RightFragment: onPause 2022-09-24 11:35:39.674 4924-4924/com.example.fragmenttest D/RightFragment: onStop 2022-09-24 11:35:39.674 4924-4924/com.example.fragmenttest D/RightFragment: onDestroyView</code></pre> <p>这里的打印信息顺序和上图显示的Fragment生命周期也一致，然后点击back：</p> <pre><code class="language-Kotlin">2022-09-24 11:37:06.254 4924-4924/com.example.fragmenttest D/RightFragment: onCreateView 2022-09-24 11:37:06.262 4924-4924/com.example.fragmenttest D/RightFragment: onActivityCreated 2022-09-24 11:37:06.262 4924-4924/com.example.fragmenttest D/RightFragment: onStart 2022-09-24 11:37:06.262 4924-4924/com.example.fragmenttest D/RightFragment: onResume</code></pre> <p>这里的打印信息顺序和上图显示的Fragment生命周期也一致，然后点击back，退出程序：</p> <pre><code class="language-Kotlin">2022-09-24 11:37:49.956 4924-4924/com.example.fragmenttest D/RightFragment: onPause 2022-09-24 11:37:49.957 4924-4924/com.example.fragmenttest D/RightFragment: onStop 2022-09-24 11:37:49.958 4924-4924/com.example.fragmenttest D/RightFragment: onDestroyView 2022-09-24 11:37:49.961 4924-4924/com.example.fragmenttest D/RightFragment: onDestroy 2022-09-24 11:37:49.968 4924-4924/com.example.fragmenttest D/RightFragment: onDetach</code></pre> <p>这里的打印信息顺序和上图显示的Fragment生命周期也一致。</p> <p>同时，在Fragment中也可以通过onSaveInstanceState方法保存数据，因为进入停止状态的Fragment可能会在系统内存不足时被回收，保存下来的数据在onCreate/onCreateView/onActivityCreated方法中都可以重新获取，其都包含一个Bundle类型的savedInstanceState参数。</p> <h2>动态加载布局的技巧</h2> <h3>使用限定符</h3> <p>在平板中，很多平板应用使用的是双页模式(左侧显示一个包含子项的列表，右侧显示内容)，因为平板屏幕足够大，完全可以同时显示两页的内容，但手机的屏幕只能显示一页的内容，因此两个页面需要分开显示。</p> <p>此时就需要限定符qualifier来在运行时判断程序因该是使用双页模式和单页模式。修改activity_main.xml：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     android:orientation="horizontal"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;fragment         android:id="@+id/leftFrag"         android:name="com.example.fragmenttest.LeftFragment"         android:layout_width="match_parent"         android:layout_height="match_parent"/&gt;  &lt;/LinearLayout&gt;</code></pre> <p>上面的代码中，只存在左侧的Fragment。然后再新建layout-large文件夹，在该文件夹下新建一个activity_main.xml：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     xmlns:tools="http://schemas.android.com/tools"     android:orientation="horizontal"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;fragment         tools:ignore="Suspicious0dp"         android:id="@+id/leftFrag"         android:name="com.example.fragmenttest.LeftFragment"         android:layout_width="0dp"         android:layout_height="match_parent"         android:layout_weight="3"/&gt;      &lt;fragment         tools:ignore="Suspicious0dp"         android:id="@+id/rightFrag"         android:name="com.example.fragmenttest.RightFragment"         android:layout_width="0dp"         android:layout_height="match_parent"         android:layout_weight="3"/&gt;  &lt;/LinearLayout&gt;</code></pre> <p>上面的代码中，存在两个Fragment，即双页模式。其中，large就是一个限定符，屏幕被认为是large的设备就会自动加载layout-large文件夹下的布局，小屏幕的设备则还是会加载layout文件夹下的布局。</p> <p>之后注释掉replaceFragment方法中的代码，在平板和手机上分别运行程序：</p> <p class="img-center"><img decoding="async" alt="" height="600" src="http://img.555519.xyz/uploads/20230205/af6a634be39f6de049a5cd9a283d191a.jpg"></p> <p class="img-center"><img loading="lazy" decoding="async" alt="" height="442" src="http://img.555519.xyz/uploads/20230205/684e0330ebe871e64bfe4cb686b251ab.jpg"></p> <p>&nbsp;可以看到，程序运行时的布局动态加载的结果是不同的。</p> <p>而Android中一些常见的限定符都有：</p> <table border="1" cellpadding="1" cellspacing="1" style="width:500px;"> <tbody> <tr> <td>屏幕特征</td> <td>限定符</td> <td>描述</td> </tr> <tr> <td colspan="1" rowspan="4">大小</td> <td>small</td> <td>提供给小屏幕设备的资源</td> </tr> <tr> <td>normal</td> <td>提供给中屏幕设备的资源</td> </tr> <tr> <td>large</td> <td>提供给大屏幕设备的资源</td> </tr> <tr> <td>xlarge</td> <td>提供给超大屏幕设备的资源</td> </tr> <tr> <td colspan="1" rowspan="5">分辨率</td> <td>ldpi</td> <td>提供给低分辨率设备的资源(120dpi以下)</td> </tr> <tr> <td>mdpi</td> <td>提供给中分辨率设备的资源(120dpi~160dpi)</td> </tr> <tr> <td>hdpi</td> <td>提供给高分辨率设备的资源(160dpi~240dpi)</td> </tr> <tr> <td>xhdpi</td> <td>提供给超高分辨率设备的资源(240dpi~320dpi)</td> </tr> <tr> <td>xxhdpi</td> <td>提供给超超高分辨率设备的资源(320dpi~480dpi)</td> </tr> <tr> <td colspan="1" rowspan="2">方向</td> <td>land</td> <td>提供给横屏设备的资源</td> </tr> <tr> <td>port</td> <td>提供给竖屏设备的资源</td> </tr> </tbody> </table> <h3>使用最小宽度限定符</h3> <p>上面使用了large限定符解决了单页双页的判断问题，但并没有指定large的具体阈值。而有时候希望可以更加灵活地为不同设备加载布局，而不管其是不是被系统认定为large，此时就可以使用最小宽度限定符。</p> <p>最小宽度限定符允许用户对屏幕的宽度指定一个最小值(以dp为单位)，然后以该最小值为分界点，屏幕宽度大于该值的设备就加载一个布局，屏幕宽度小于该值的设备就加载另一个布局。</p> <p>比如layout-sw600dp文件夹下建立activity_main.xml，就会在屏幕宽度大于等于600dp的设备上加载，反之就会加载默认的布局。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-75475.htm">开动物医院需要多少资金呢（开一个动物医院需要多少钱）</a></p>
                                        <p>下一个：<a href="/news/article-76172.htm">猫3针疫苗多少钱一针（猫猫3针疫苗多少钱）</a></p>
                                    </div>
                
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-46886.htm" title="Java数组foreach赋值不生效的问题">Java数组foreach赋值不生效的问题</a></li>
                        <li class="py-2"><a href="/news/article-52469.htm" title="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型">通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-10-free-node-subscribe.htm" title="1月10日 | SingBox每天更新23M/S免费节点链接地址分享">1月10日 | SingBox每天更新23M/S免费节点链接地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-1-free-subscribe-node.htm" title="2月1日 | SingBox每天更新20.8M/S免费节点链接地址分享">2月1日 | SingBox每天更新20.8M/S免费节点链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-57982.htm" title="一个 Java8 的线程池 BUG 引发线上偶发 Bug 重现分析">一个 Java8 的线程池 BUG 引发线上偶发 Bug 重现分析</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-17-sing-box-node-github.htm" title="1月17日 | SingBox每天更新22.7M/S免费节点链接地址分享">1月17日 | SingBox每天更新22.7M/S免费节点链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-51408.htm" title="被猫咬了怎样判断用不用打狂犬疫苗（被猫咬了怎样判断用不用打狂犬疫苗了）">被猫咬了怎样判断用不用打狂犬疫苗（被猫咬了怎样判断用不用打狂犬疫苗了）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-4-today-sing-box-node.htm" title="3月4日 | SingBox每天更新22.5M/S免费节点链接地址分享">3月4日 | SingBox每天更新22.5M/S免费节点链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-59127.htm" title="开宠物店利润高吗知乎（开宠物店利润大吗）">开宠物店利润高吗知乎（开宠物店利润大吗）</a></li>
                        <li class="py-2"><a href="/news/article-65075.htm" title="Java中的希尔排序">Java中的希尔排序</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End Tabs Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container d-md-flex py-4">
            <div class="me-md-auto text-center text-md-start">
                <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    SingBox Github免费节点分享站 版权所有 Powered by WordPress
                </div>
            </div>
            <div class="social-links text-center text-md-end pt-3 pt-md-0">
                <a href="#" class="twitter"><i class="bx bxl-twitter"></i></a>
                <a href="#" class="facebook"><i class="bx bxl-facebook"></i></a>
                <a href="#" class="instagram"><i class="bx bxl-instagram"></i></a>
                <a href="#" class="google-plus"><i class="bx bxl-skype"></i></a>
                <a href="#" class="linkedin"><i class="bx bxl-linkedin"></i></a>
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/singboxgithub/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/singboxgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>
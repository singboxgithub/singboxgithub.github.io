<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://singboxgithub.github.io/news/article-107888.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Feign优化之Client选择</title>
        <meta name="description" content="Feign远程调用的基本流程 Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成J" />
        <link rel="icon" href="/assets/website/img/singboxgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="SingBox Github免费节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://singboxgithub.github.io/news/article-107888.htm" />
    <meta property="og:site_name" content="SingBox Github免费节点分享站" />
    <meta property="og:title" content="Feign优化之Client选择" />
    <meta property="og:image" content="https://singboxgithub.github.io/uploads/20240802/154365a0041b8469491971d011c2a320.webp" />
        <meta property="og:release_date" content="2025-04-30T09:33:29" />
    <meta property="og:updated_time" content="2025-04-30T09:33:29" />
        <meta property="og:description" content="Feign远程调用的基本流程 Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成J" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Feign优化之Client选择">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/singboxgithub/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/remixicon/remixicon.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/singboxgithub/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/singboxgithub/style.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-QR1XS4LQCV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-QR1XS4LQCV');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- ======= Header ======= -->
    <header id="header" class="fixed-top d-flex align-items-center">
        <div class="container d-flex align-items-center">
            <a href="/">
                        <p class="logo me-auto">SingBox <span>Github</span></p>
                        </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <ol>
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li>正文</li>
                </ol>
                <h1>Feign优化之Client选择</h1>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= Tabs Section ======= -->
        <section id="tabs" class="tabs">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="htmledit_views"> <h3 style="margin-left:0;text-align:justify;"><strong>Feign远程调用的基本流程</strong></h3> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">Feign</span><span style="color:#222222;">远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，返回给调用者。Feign远程调用的基本流程，大致如下图所示。</span></p> <p style="margin-left:.0001pt;text-align:justify;"><img fetchpriority="high" decoding="async" alt="" height="793" src="http://img.555519.xyz/uploads3/20220602/a3c9b446419903c812fc04e37bacc894.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">从上图可以看到，Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的 Request 请求。通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。</span></p> <h3 style="margin-left:0;text-align:justify;"><strong>Feign 远程调用的重要组件</strong></h3> <p><strong>远程接口的本地JDK Proxy代理实例</strong></p> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">在微服务启动时，Feign会进行包扫描，对加@FeignClient注解的接口，按照注解的规则，创建远程接口的本地JDK Proxy代理实例。然后，将这些本地Proxy代理实例，注入到Spring IOC容器中。当远程接口的方法被调用，由Proxy代理实例去完成真正的远程访问，并且返回结果</span></p> <p><strong>调用处理器 InvocationHandler</strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">通过 JDK Proxy 生成动态代理类，核心步骤就是需要定制一个调用处理器，具体来说，就是实现JDK中位于java.lang.reflect 包中的 InvocationHandler 调用处理器接口，并且实现该接口的 invoke（…） 抽象方法。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">为了创建Feign的远程接口的代理实现类，Feign提供了自己的一个默认的调用处理器，叫做 FeignInvocationHandler 类，该类处于 feign-core 核心jar包中。当然，调用处理器可以进行替换，如果Feign与Hystrix结合使用，则会替换成 HystrixInvocationHandler 调用处理器类，类处于 feign-hystrix 的jar包中。</span></p> <p style="margin-left:0cm;"><img decoding="async" alt="" height="478" src="http://img.555519.xyz/uploads3/20220602/1c4c5a986a766fc67eca172f3f613b9e.jpg"></p> <p style="margin-left:0cm;"> <p><strong>默认的调用处理器 FeignInvocationHandler</strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">默认的调用处理器 FeignInvocationHandle，在处理远程方法调用的时候，会根据Java反射的方法实例，在dispatch 映射对象中，找到对应的MethodHandler 方法处理器，然后交给MethodHandler 完成实际的HTTP请求和结果的处理。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">FeignInvocationHandler</span><span style="color:#222222;">的关键源码，节选如下：</span></p> <p style="margin-left:0cm;"><img decoding="async" alt="" height="641" src="http://img.555519.xyz/uploads3/20220602/9d577798aae01215afaf80d38e0d3a13.jpg"></p> <p style="margin-left:0cm;"> <p style="margin-left:0cm;"><span style="color:#222222;">源码很简单，重点在于invoke(…)方法，虽然核心代码只有一行，但是其功能是复杂的：</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（1）根据Java反射的方法实例，在dispatch 映射对象中，找到对应的MethodHandler 方法处理器；</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（2）调用MethodHandler方法处理器的 invoke(...) 方法，完成实际的HTTP请求和结果的处理。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">补充说明一下：MethodHandler 方法处理器，和JDK 动态代理机制中位于 java.lang.reflect 包的 InvocationHandler 调用处理器接口，没有任何的继承和实现关系。MethodHandler 仅仅是Feign自定义的，一个非常简单接口。</span></p> <p><strong>方法处理器 MethodHandler</strong></p> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">Feign</span><span style="color:#222222;">的方法处理器 MethodHandler 是一个独立的接口，定义在 InvocationHandlerFactory 接口中，仅仅拥有一个invoke(…)方法，源码如下：</span></p> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="228" src="http://img.555519.xyz/uploads3/20220602/e902d0ede8e7afd55e212db800728c19.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">MethodHandler</span><span style="color:#222222;">的invoke(…)方法，主要职责是完成实际远程URL请求，然后返回解码后的远程URL的响应结果。Feign提供了默认的 SynchronousMethodHandler 实现类，提供了基本的远程URL的同步请求处理。有关 SynchronousMethodHandler类以及其与MethodHandler的关系，大致下图所示：</span></p> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="502" src="http://img.555519.xyz/uploads3/20220602/9b23e438450a613034eaeb2ca67619f8.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:0cm;"><span style="color:#222222;">SynchronousMethodHandler</span><span style="color:#222222;">的invoke(…)方法，调用了自己的executeAndDecode(…) 请求执行和结果解码方法。该方法的工作步骤：</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（1）首先通 RequestTemplate 请求模板实例，生成远程URL请求实例 request；</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（2）然后用自己的 feign 客户端client成员，excecute(…) 执行请求，并且获取 response 响应；</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（3）对response 响应进行结果解码。</span></p> <p><strong>Feign 客户端组件 feign.Client</strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">客户端组件是Feign中一个非常重要的组件，负责端到端的执行URL请求。其核心的逻辑：发送request请求到服务器，并接收response响应后进行解码。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">feign.Client</span><span style="color:#222222;">类，是代表客户端的顶层接口，只有一个抽象方法，源码如下：</span></p> <p style="margin-left:0cm;"><img loading="lazy" decoding="async" alt="" height="230" src="http://img.555519.xyz/uploads3/20220602/0705f4a038e70b1d074d2717a595fc60.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:0cm;"><span style="color:#222222;">由于不同的feign.Client 实现类，内部完成HTTP请求的组件和技术不同，故，feign.Client 有多个不同的实现。这里举出几个例子：</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（1）Client.Default类：默认的feign.Client 客户端实现类，内部使用HttpURLConnnection 完成URL请求处理；</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（2）ApacheHttpClient 类：内部使用 Apache httpclient 开源组件完成URL请求处理的feign.Client 客户端实现类；</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（3）OkHttpClient类：内部使用 OkHttp3 开源组件完成URL请求处理的feign.Client 客户端实现类。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（4）LoadBalancerFeignClient 类：内部使用 Ribben 负载均衡技术完成URL请求处理的feign.Client 客户端实现类。</span></p> <p><strong>一：Client.Default类：</strong></p> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">作为默认的Client 接口的实现类，在Client.Default内部使用JDK自带的HttpURLConnnection类实现URL网络请求。</span></p> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">在JKD1.8中，虽然在HttpURLConnnection 底层，使用了非常简单的HTTP连接池技术，但是，其HTTP连接的复用能力，实际是非常弱的，性能当然也很低。</span></p> <p><strong>二：ApacheHttpClient类</strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">ApacheHttpClient</span><span style="color:#222222;">客户端类的内部，使用 Apache HttpClient开源组件完成URL请求的处理。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">从代码开发的角度而言，Apache HttpClient相比传统JDK自带的URLConnection，增加了易用性和灵活性，它不仅使客户端发送Http请求变得容易，而且也方便开发人员测试接口。既提高了开发的效率，也方便提高代码的健壮性。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">从性能的角度而言，Apache HttpClient带有连接池的功能，具备优秀的HTTP连接的复用能力。关于带有连接池Apache HttpClient的性能提升倍数，具体可以参见后面的对比试验。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">ApacheHttpClient</span><span style="color:#222222;">类处于 feign-httpclient 的专门jar包中，如果使用，还需要通过Maven依赖或者其他的方式，倒入配套版本的专门jar包。</span></p> <p><strong>三：OkHttpClient类</strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">OkHttpClient</span><span style="color:#222222;">客户端类的内部，使用OkHttp3 开源组件完成URL请求处理。OkHttp3 开源组件由Square公司开发，用于替代HttpUrlConnection和Apache HttpClient。由于OkHttp3较好的支持 SPDY协议（SPDY是Google开发的基于TCP的传输层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验。），从Android4.4开始，google已经开始将Android源码中的 HttpURLConnection 请求类使用OkHttp进行了替换。也就是说，对于Android 移动端APP开发来说，OkHttp3 组件，是基础的开发组件之一。</span></p> <p><strong>四：LoadBalancerFeignClient 类</strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">LoadBalancerFeignClient</span><span style="color:#222222;">内部使用了 Ribben 客户端负载均衡技术完成URL请求处理。在原理上，简单的使用了delegate包装代理模式：Ribben负载均衡组件计算出合适的服务端server之后，由内部包装 delegate 代理客户端完成到服务端server的HTTP请求；所封装的 delegate 客户端代理实例的类型，可以是 Client.Default 默认客户端，也可以是 ApacheHttpClient 客户端类或OkHttpClient 高性能客户端类，还可以其他的定制的feign.Client 客户端实现类型。</span></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;"> <h3 style="margin-left:0;text-align:justify;"><strong>Feigh 远程调用的执行流程</strong></h3> <p style="margin-left:0cm;"><span style="color:#222222;">由于Feign远程调用接口的JDK Proxy实例的InvokeHandler调用处理器有多种，导致Feign远程调用的执行流程，也稍微有所区别，但是远程调用执行流程的主要步骤，是一致的。这里以FeignInvocationHandler进行说明相关的远程调用执行流程：</span></p> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">FeignInvocationHandler</span><span style="color:#222222;">是默认的调用处理器，如果不对Feign做特殊的配置，则Feign将使用此调用处理器。</span></p> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="426" src="http://img.555519.xyz/uploads3/20220602/24fd3d369ef4c34bf2545bdcbba96c35.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:0cm;"><span style="color:#222222;">整体的远程调用执行流程，大致分为4步，具体如下：</span></p> <p style="margin-left:0;"><strong><span style="color:#222222;">第1步：通过Spring IOC 容器实例，装配代理实例，然后进行远程调用。</span></strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">前文讲到，Feign在启动时，会为加上了@FeignClient注解的所有远程接口（包括 DemoClient 接口），创建一个本地JDK Proxy代理实例，并注册到Spring IOC容器。在这里，暂且将这个Proxy代理实例，叫做 DemoClientProxy。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">然后，在本实例的UserController 调用代码中，通过@Resource注解，按照类型或者名称进行匹配（这里的类型为DemoClient接口类型），从Spring IOC容器找到这个代理实例，并且装配给@Resource注解所在的成员变量，本实例的成员变量的名称为 demoClient。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">在需要代进行hello（）远程调用时，直接通过 demoClient 成员变量，调用JDK Proxy动态代理实例的hello（）方法。</span></p> <p style="margin-left:0;"><strong><span style="color:#222222;">第2步：执行 InvokeHandler 调用处理器的invoke(…)方法</span></strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">前面讲到，JDK Proxy动态代理实例的真正的方法调用过程，具体是通过 InvokeHandler 调用处理器完成的。故，这里的DemoClientProxy代理实例，会调用到默认的FeignInvocationHandler 调用处理器实例的invoke(…)方法。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">通过前面 FeignInvocationHandler 调用处理器的详细介绍，大家已经知道，默认的调用处理器 FeignInvocationHandle，内部保持了一个远程调用方法实例和方法处理器的一个Key-Value键值对Map映射。FeignInvocationHandle 在其invoke(…)方法中，会根据Java反射的方法实例，在dispatch 映射对象中，找到对应的 MethodHandler 方法处理器，然后由后者完成实际的HTTP请求和结果的处理。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">所以在第2步中，FeignInvocationHandle 会从自己的 dispatch映射中，找到hello()方法所对应的MethodHandler 方法处理器，然后调用其 invoke(…)方法。</span></p> <p style="margin-left:0;"><strong><span style="color:#222222;">第3步：执行 MethodHandler 方法处理器的invoke(…)方法</span></strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">通过前面关于 MethodHandler 方法处理器的非常详细的组件介绍，大家都知道，feign默认的方法处理器为 SynchronousMethodHandler，其invoke(…)方法主要是通过内部成员feign客户端成员 client，完成远程 URL 请求执行和获取远程结果。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">feign.Client</span><span style="color:#222222;">客户端有多种类型，不同的类型，完成URL请求处理的具体方式不同。</span></p> <p style="margin-left:0;"><strong><span style="color:#222222;">第4步：通过 feign.Client 客户端成员，完成远程 URL 请求执行和获取远程结果</span></strong></p> <p style="margin-left:0cm;"><span style="color:#222222;">如果MethodHandler方法处理器实例中的client客户端，是默认的 feign.Client.Default 实现类性，则使用JDK自带的HttpURLConnnection类，完成远程 URL 请求执行和获取远程结果。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">如果MethodHandler方法处理器实例中的client客户端，是 ApacheHttpClient 客户端实现类性，则使用 Apache httpclient 开源组件，完成远程 URL 请求执行和获取远程结果。</span></p> <p style="margin-left:0cm;"> <p style="margin-left:0cm;"><span style="color:#222222;">通过以上四步，应该可以清晰的了解到了 SpringCloud中的 feign 远程调用执行流程和运行机制。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">实际上，为了简明扼要的介绍清楚默认的调用流程，上面的流程，实际上省略了一个步骤：第3步，实际可以分为两小步。为啥呢？ SynchronousMethodHandler 并不是直接完成远程URL的请求，而是通过负载均衡机制，定位到合适的远程server 服务器，然后再完成真正的远程URL请求。换句话说，SynchronousMethodHandler实例的client成员，其实际不是feign.Client.Default类型，而是 LoadBalancerFeignClient 客户端负载均衡类型。 因此，上面的第3步，如果进一步细分话，大致如下：（1）首先通过 SynchronousMethodHandler 内部的client实例，实质为负责客户端负载均衡 LoadBalancerFeignClient 实例，首先查找到远程的 server 服务端；（2） 然后再由LoadBalancerFeignClient 实例内部包装的feign.Client.Default 内部类实例，去请求server端服务器，完成URL请求处理</span></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;"> <h3 style="margin-left:0;text-align:justify;"><strong>Feign.Client性能测试：</strong></h3> <p style="margin-left:.0001pt;text-align:justify;">如上所述，实际处理请求的Feign.Client分为三种：URLConnection、HttpClient、okHttp。下面我们对这三种进行性能测试。</p> <p style="margin-left:.0001pt;text-align:justify;">我们需要对Feign的所有客户端进行性能测试，以此来确定选择一个最优的客户端调用工具。</p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;">测试服务器：Intel(R) Core(TM) i5-5300U CPU @ 2.30GHz &nbsp;16G内存</p> <p style="margin-left:.0001pt;text-align:justify;">测试工具：apache-jmeter-5.4.1</p> <p style="margin-left:.0001pt;text-align:justify;">Tomcat连接池配置：max-threads: 200(默认值), max-connections: 2000（默认值为8192）</p> <p style="margin-left:.0001pt;text-align:justify;">okHttp、HttpClient的连接池配置：max-connections: 200(默认值)，max-connections-per-route: 50(默认值)</p> <p style="margin-left:.0001pt;text-align:justify;">启动的Java进程JVM参数：</p> <p style="margin-left:.0001pt;text-align:justify;">Xms: 268435456B(256MB)&nbsp;&nbsp;&nbsp; xmx:4263510016B(3.97GB)</p> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="57" src="http://img.555519.xyz/uploads3/20220602/217ed9f25e3f41964fc39e3c23a588f4.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p><strong>测试参数：线程数：100，Ramp-up period：2， Loop Count: 10</strong></p> <p style="margin-left:.0001pt;text-align:justify;">（测试参数说明：模拟100个用户，在2秒钟之内全部发出请求，访问一个有RPC调用的接口，请求返回之后继续发出请求，每个用户就这样连续发送10次）</p> <p style="margin-left:.0001pt;text-align:justify;">参数截图如下：</p> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="460" src="http://img.555519.xyz/uploads3/20220602/be1a5dc2f0ee275c3bc31f60b64da728.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="text-align:justify;">1.实用默认的URLConnection:</p> <p><img loading="lazy" decoding="async" alt="" height="93" src="http://img.555519.xyz/uploads3/20220602/494c455e97806fcc8fa88fcae841e5f5.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="text-align:justify;">2.实用HttpClient:</p> <p style="text-align:justify;"><img loading="lazy" decoding="async" alt="" height="101" src="http://img.555519.xyz/uploads3/20220602/36dabba8a781709c8b2695c886f171fe.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="text-align:justify;">3.使用okHttp:</p> <p style="text-align:justify;"><img loading="lazy" decoding="async" alt="" height="104" src="http://img.555519.xyz/uploads3/20220602/733a7d490c83b0637320d22c21027ac7.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;">(聚合报告说明：Samples: 一共发出多少个请求，Average:平均每个请求耗时多少毫秒，Min：所有请求中耗时最少多少毫秒，Max：所有请求中耗时最多多少毫秒，Error%：出错接口的比例，Throughput：吞吐量，每秒响应多少个请求，Received KB/sec：每秒接收的数据量，Send KB/sec：每秒发出的数据量)</p> <p style="margin-left:.0001pt;text-align:justify;"> <p><strong>测试参数：线程数：1000，Ramp-up period：2， Loop Count: 10</strong></p> <p style="text-align:justify;">1.实用默认的HRLConnection:</p> <p style="text-align:justify;"><img loading="lazy" decoding="async" alt="" height="127" src="http://img.555519.xyz/uploads3/20220602/6337c4de5b1b3c9b0a39627441e16b68.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="text-align:justify;">2.实用HttpClient:</p> <p style="text-align:justify;"><img loading="lazy" decoding="async" alt="" height="92" src="http://img.555519.xyz/uploads3/20220602/a5328940fd0d1913cc3358960b50262e.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="text-align:justify;">3.实用OKHttp:</p> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="97" src="http://img.555519.xyz/uploads3/20220602/56ac4c4f94de8193d1b7f45385e9428c.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;">由此可见，okHttp性能最佳。</p> <p style="margin-left:.0001pt;text-align:justify;"> <h3 style="margin-left:0;text-align:justify;"><strong>引入okHttp：</strong></h3> <p style="margin-left:0cm;"><span style="color:#222222;">Feign</span><span style="color:#222222;">有两个与Client相关的自动配置类：</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（1）org.springframework.cloud.openfeign.ribbon.FeignRibbonClientAutoConfiguration</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（2）org.springframework.cloud.openfeign.FeignAutoConfiguration</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">第一个自动配置类，能够配置具有负载均衡能力的FeignClient容器实例；第二自动配置类，只能配置最原始的FeignClient容器实例。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">具备负载均衡能力的 FeignClient 容器实例，所对应的类型为 LoadBalancerFeignClient 类型。前面讲到，在SpringCloud中，为了达到高可用，一个微服务至少应该部署两个以上节点，从这个角度来说，LoadBalancerFeignClient 容器实例，已经成为事实上的标配。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">事实上，第一个自动配置类 FeignRibbonClientAutoConfiguration，在容器的装配次序上，是优先于第二个自动配置类 FeignAutoConfiguration 的。具体可以参见其源码，节选如下：</span></p> <p style="margin-left:0cm;"><img loading="lazy" decoding="async" alt="" height="349" src="http://img.555519.xyz/uploads3/20220602/55c4115a7cd1a41b6f9698f9c8b35555.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">FeignRibbonClientAutoConfiguration</span><span style="color:#222222;">自动配置类，并没有直接配置LoadBalancerFeignClient 容器实例，而是使用@Import注解，通过导入其他配置类的方式，完成 LoadBalancerFeignClient 客户端容器实例的配置。</span></p> <p style="margin-left:0;"><strong><span style="color:#222222;">分别导入了以下三个自动配置类</span></strong><span style="color:#222222;">：</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（1） HttpClientFeignLoadBalancedConfiguration.class</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">该配置类，负责配置一个包装 ApacheHttpClient 实例的 LoadBalancerFeignClient负载均衡客户端。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（2） OkHttpFeignLoadBalancedConfiguration.class</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">该配置类，负责配置一个包装 OkHttpClient 实例的 LoadBalancerFeignClient负载均衡客户端。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（3） DefaultFeignLoadBalancedConfiguration.class</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">该配置类，负责配置一个包装 Client.Default 实例的 LoadBalancerFeignClient负载均衡客户端。</span></p> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">接下来，来看如何配置一个包装 OkHttpClient 实例的负载均衡容器实例。这个IOC实例的配置，由 OkHttpFeignLoadBalancedConfiguration 自动配置类完成的，其源码节选如下：</span></p> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="437" src="http://img.555519.xyz/uploads3/20220602/0b5919446e45d3ca45764bd4ef76cf6c.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:0cm;"><span style="color:#222222;">看类 OkHttpFeignLoadBalancedConfiguration 上的两个重要的注解：</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（1）@ConditionalOnClass(OkHttpClient.class)</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（2）@ConditionalOnProperty("feign.okhttp.enabled")</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">这两个条件的含义为：</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（1）必须满足 OkHttpClient.class 在当前类路径中存在；</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">（2）必须满足工程配置文件中 feign.okhttp.enabled 配置项的值为 true 。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">如果以上两个条件同时满足，则 OkHttpFeignLoadBalancedConfiguration 自动配置工作就会启动。</span></p> <p style="margin-left:0cm;"><span style="color:#222222;">为了满足 @ConditionalOnClass(OkHttpClient.class) 的条件要求，由于OkHttpClient.class 类的位置处于 feign-okhttp 相关的jar包中，所以，需要在pom文件加上 feign-okhttp 以及 okhttp3 相关的 Maven 依赖。具体如下：</span></p> <p style="margin-left:0cm;"><img loading="lazy" decoding="async" alt="" height="142" src="http://img.555519.xyz/uploads3/20220602/1d1adf744858e66540ac0649fce76eed.jpg"></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#222222;">对于 feign.okhttp.enabled 配置项设置，在默认的情况下就为 false。也就是说，如果需要使用feign-okhttp，则一定需要做特别的配置，在工程配置文件中，加上 feign.okhttp.enabled 配置项的值，并且值必须为 true：</span></p> <p style="margin-left:.0001pt;text-align:justify;"> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="107" src="http://img.555519.xyz/uploads3/20220602/8b8eb6d7389fd92f75e72cde944d9552.jpg"></p> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-107884.htm">python 中yield的使用</a></p>
                                    </div>
                
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-3-7-sing-box-github.htm" title="3月7日 | SingBox每天更新20.4M/S免费节点链接地址分享">3月7日 | SingBox每天更新20.4M/S免费节点链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-80255.htm" title="vue实现横屏滚动公告效果_vue.js">vue实现横屏滚动公告效果_vue.js</a></li>
                        <li class="py-2"><a href="/news/article-87356.htm" title="被猫抓出血怎么样判断有没有事（被猫抓出血怎么样判断有没有事儿）">被猫抓出血怎么样判断有没有事（被猫抓出血怎么样判断有没有事儿）</a></li>
                        <li class="py-2"><a href="/news/article-76836.htm" title="动物疫苗价格排行前十的有哪些品种呢视频（动物疫苗多少钱一支）">动物疫苗价格排行前十的有哪些品种呢视频（动物疫苗多少钱一支）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-26-sing-box-node-share.htm" title="3月26日 | SingBox每天更新21.2M/S免费节点链接地址分享">3月26日 | SingBox每天更新21.2M/S免费节点链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-65709.htm" title="宠物粮食排名榜最新（宠物粮食排名榜最新）">宠物粮食排名榜最新（宠物粮食排名榜最新）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-22-sing-box-github.htm" title="4月22日 | SingBox每天更新18.5M/S免费节点链接地址分享">4月22日 | SingBox每天更新18.5M/S免费节点链接地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-27-sing-box-node-github.htm" title="3月27日 | SingBox每天更新20.9M/S免费节点链接地址分享">3月27日 | SingBox每天更新20.9M/S免费节点链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-66318.htm" title="动物疫苗排名前十名有哪些 动物疫苗排名前十名有哪些品种">动物疫苗排名前十名有哪些 动物疫苗排名前十名有哪些品种</a></li>
                        <li class="py-2"><a href="/news/article-91503.htm" title="动物疫苗行业排名榜（动物疫苗企业名单）">动物疫苗行业排名榜（动物疫苗企业名单）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">86</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End Tabs Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container d-md-flex py-4">
            <div class="me-md-auto text-center text-md-start">
                <div class="copyright">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    SingBox Github免费节点分享站 版权所有 Powered by WordPress
                </div>
            </div>
            <div class="social-links text-center text-md-end pt-3 pt-md-0">
                <a href="#" class="twitter"><i class="bx bxl-twitter"></i></a>
                <a href="#" class="facebook"><i class="bx bxl-facebook"></i></a>
                <a href="#" class="instagram"><i class="bx bxl-instagram"></i></a>
                <a href="#" class="google-plus"><i class="bx bxl-skype"></i></a>
                <a href="#" class="linkedin"><i class="bx bxl-linkedin"></i></a>
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/singboxgithub/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/singboxgithub/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/singboxgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>